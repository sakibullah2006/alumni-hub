/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    profilePicture: integer('profile_picture_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: text('title'),
    bio: text('bio'),
    dskmPassingYear: numeric('dskm_passing_year', { mode: 'number' }),
    major: text('major'),
    contactEmail: text('contact_email'),
    phone: text('phone'),
    linkedInUrl: text('linked_in_url'),
    facebookUrl: text('facebook_url'),
    websiteUrl: text('website_url'),
    address: integer('address_id').references(() => address.id, {
      onDelete: 'set null',
    }),
    name: text('name').notNull(),
    email: text('email').notNull(),
    emailVerified: integer('email_verified', { mode: 'boolean' }).notNull().default(false),
    image: text('image'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    role: text('role').default('user'),
    banned: integer('banned', { mode: 'boolean' }).default(false),
    banReason: text('ban_reason'),
    banExpires: text('ban_expires').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('users_profile_picture_idx').on(columns.profilePicture),
    index('users_address_idx').on(columns.address),
    uniqueIndex('users_email_idx').on(columns.email),
    index('users_created_at_idx').on(columns.createdAt),
    index('users_updated_at_idx').on(columns.updatedAt),
  ],
)

export const user_sessions = sqliteTable(
  'user_sessions',
  {
    id: integer('id').primaryKey(),
    expiresAt: text('expires_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    token: text('token').notNull(),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    ipAddress: text('ip_address'),
    userAgent: text('user_agent'),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    impersonatedBy: text('impersonated_by'),
  },
  (columns) => [
    uniqueIndex('user_sessions_token_idx').on(columns.token),
    index('user_sessions_created_at_idx').on(columns.createdAt),
    index('user_sessions_updated_at_idx').on(columns.updatedAt),
    index('user_sessions_user_idx').on(columns.user),
  ],
)

export const user_accounts = sqliteTable(
  'user_accounts',
  {
    id: integer('id').primaryKey(),
    accountId: text('account_id').notNull(),
    providerId: text('provider_id').notNull(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    accessToken: text('access_token'),
    refreshToken: text('refresh_token'),
    idToken: text('id_token'),
    accessTokenExpiresAt: text('access_token_expires_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    refreshTokenExpiresAt: text('refresh_token_expires_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    scope: text('scope'),
    password: text('password'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('user_accounts_account_id_idx').on(columns.accountId),
    index('user_accounts_user_idx').on(columns.user),
    index('user_accounts_access_token_expires_at_idx').on(columns.accessTokenExpiresAt),
    index('user_accounts_refresh_token_expires_at_idx').on(columns.refreshTokenExpiresAt),
    index('user_accounts_created_at_idx').on(columns.createdAt),
    index('user_accounts_updated_at_idx').on(columns.updatedAt),
  ],
)

export const verifications = sqliteTable(
  'verifications',
  {
    id: integer('id').primaryKey(),
    identifier: text('identifier').notNull(),
    value: text('value').notNull(),
    expiresAt: text('expires_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('verifications_identifier_idx').on(columns.identifier),
    index('verifications_expires_at_idx').on(columns.expiresAt),
    index('verifications_created_at_idx').on(columns.createdAt),
    index('verifications_updated_at_idx').on(columns.updatedAt),
  ],
)

export const admin_invitations = sqliteTable(
  'admin_invitations',
  {
    id: integer('id').primaryKey(),
    role: text('role', { enum: ['admin', 'user'] })
      .notNull()
      .default('admin'),
    token: text('token').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('admin_invitations_token_idx').on(columns.token),
    index('admin_invitations_updated_at_idx').on(columns.updatedAt),
    index('admin_invitations_created_at_idx').on(columns.createdAt),
  ],
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    blurDataURL: text('blur_data_u_r_l'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize', { mode: 'number' }),
    width: numeric('width', { mode: 'number' }),
    height: numeric('height', { mode: 'number' }),
    focalX: numeric('focal_x', { mode: 'number' }),
    focalY: numeric('focal_y', { mode: 'number' }),
  },
  (columns) => [
    index('media_user_idx').on(columns.user),
    index('media_updated_at_idx').on(columns.updatedAt),
    index('media_created_at_idx').on(columns.createdAt),
    uniqueIndex('media_filename_idx').on(columns.filename),
  ],
)

export const address = sqliteTable(
  'address',
  {
    id: integer('id').primaryKey(),
    presentAddress_street: text('present_address_street'),
    presentAddress_city: text('present_address_city'),
    presentAddress_state: text('present_address_state'),
    presentAddress_postalCode: text('present_address_postal_code'),
    presentAddress_country: text('present_address_country').notNull(),
    permanentAddress_street: text('permanent_address_street'),
    permanentAddress_city: text('permanent_address_city'),
    permanentAddress_state: text('permanent_address_state'),
    permanentAddress_postalCode: text('permanent_address_postal_code'),
    permanentAddress_country: text('permanent_address_country').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('address_updated_at_idx').on(columns.updatedAt),
    index('address_created_at_idx').on(columns.createdAt),
  ],
)

export const educations = sqliteTable(
  'educations',
  {
    id: integer('id').primaryKey(),
    institutionName: text('institution_name').notNull(),
    degree: text('degree').notNull(),
    fieldOfStudy: text('field_of_study').notNull(),
    result_gradeType: text('result_grade_type', { enum: ['gpa', 'cgpa', 'percentage'] }),
    result_grade: numeric('result_grade', { mode: 'number' }),
    result_scale: numeric('result_scale', { mode: 'number' }),
    startDate: text('start_date').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    isOngoing: integer('is_ongoing', { mode: 'boolean' }).default(false),
    endDate: text('end_date').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    description: text('description'),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('educations_user_idx').on(columns.user),
    index('educations_updated_at_idx').on(columns.updatedAt),
    index('educations_created_at_idx').on(columns.createdAt),
  ],
)

export const experiences = sqliteTable(
  'experiences',
  {
    id: integer('id').primaryKey(),
    jobTitle: text('job_title').notNull(),
    companyName: text('company_name').notNull(),
    location: text('location'),
    startDate: text('start_date')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    endDate: text('end_date').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    description: text('description', { mode: 'json' }),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('experiences_user_idx').on(columns.user),
    index('experiences_updated_at_idx').on(columns.updatedAt),
    index('experiences_created_at_idx').on(columns.createdAt),
  ],
)

export const blogs_blocks_rich_text = sqliteTable(
  'blogs_blocks_rich_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    content: text('content', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('blogs_blocks_rich_text_order_idx').on(columns._order),
    index('blogs_blocks_rich_text_parent_id_idx').on(columns._parentID),
    index('blogs_blocks_rich_text_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blogs.id],
      name: 'blogs_blocks_rich_text_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const blogs_blocks_image = sqliteTable(
  'blogs_blocks_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    caption: text('caption'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('blogs_blocks_image_order_idx').on(columns._order),
    index('blogs_blocks_image_parent_id_idx').on(columns._parentID),
    index('blogs_blocks_image_path_idx').on(columns._path),
    index('blogs_blocks_image_image_idx').on(columns.image),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blogs.id],
      name: 'blogs_blocks_image_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const blogs_blocks_code = sqliteTable(
  'blogs_blocks_code',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    code: text('code'),
    language: text('language', {
      enum: ['javascript', 'typescript', 'python', 'go', 'html', 'css', 'json'],
    }).default('javascript'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('blogs_blocks_code_order_idx').on(columns._order),
    index('blogs_blocks_code_parent_id_idx').on(columns._parentID),
    index('blogs_blocks_code_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blogs.id],
      name: 'blogs_blocks_code_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const blogs = sqliteTable(
  'blogs',
  {
    id: integer('id').primaryKey(),
    title: text('title'),
    excerpt: text('excerpt'),
    seo_metaTitle: text('seo_meta_title'),
    seo_metaDescription: text('seo_meta_description'),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug'),
    status: text('status', { enum: ['draft', 'published'] }).default('draft'),
    publishedDate: text('published_date').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    author: integer('author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => [
    uniqueIndex('blogs_slug_idx').on(columns.slug),
    index('blogs_author_idx').on(columns.author),
    index('blogs_featured_image_idx').on(columns.featuredImage),
    index('blogs_updated_at_idx').on(columns.updatedAt),
    index('blogs_created_at_idx').on(columns.createdAt),
    index('blogs__status_idx').on(columns._status),
  ],
)

export const blogs_rels = sqliteTable(
  'blogs_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    categoriesID: integer('categories_id'),
    tagsID: integer('tags_id'),
  },
  (columns) => [
    index('blogs_rels_order_idx').on(columns.order),
    index('blogs_rels_parent_idx').on(columns.parent),
    index('blogs_rels_path_idx').on(columns.path),
    index('blogs_rels_categories_id_idx').on(columns.categoriesID),
    index('blogs_rels_tags_id_idx').on(columns.tagsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [blogs.id],
      name: 'blogs_rels_parent_1_idx',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'blogs_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'blogs_rels_tags_fk',
    }).onDelete('cascade'),
  ],
)

export const _blogs_v_blocks_rich_text = sqliteTable(
  '_blogs_v_blocks_rich_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    content: text('content', { mode: 'json' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_blogs_v_blocks_rich_text_order_idx').on(columns._order),
    index('_blogs_v_blocks_rich_text_parent_id_idx').on(columns._parentID),
    index('_blogs_v_blocks_rich_text_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_blogs_v.id],
      name: '_blogs_v_blocks_rich_text_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _blogs_v_blocks_image = sqliteTable(
  '_blogs_v_blocks_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    caption: text('caption'),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_blogs_v_blocks_image_order_idx').on(columns._order),
    index('_blogs_v_blocks_image_parent_id_idx').on(columns._parentID),
    index('_blogs_v_blocks_image_path_idx').on(columns._path),
    index('_blogs_v_blocks_image_image_idx').on(columns.image),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_blogs_v.id],
      name: '_blogs_v_blocks_image_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _blogs_v_blocks_code = sqliteTable(
  '_blogs_v_blocks_code',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    code: text('code'),
    language: text('language', {
      enum: ['javascript', 'typescript', 'python', 'go', 'html', 'css', 'json'],
    }).default('javascript'),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_blogs_v_blocks_code_order_idx').on(columns._order),
    index('_blogs_v_blocks_code_parent_id_idx').on(columns._parentID),
    index('_blogs_v_blocks_code_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_blogs_v.id],
      name: '_blogs_v_blocks_code_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _blogs_v = sqliteTable(
  '_blogs_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => blogs.id, {
      onDelete: 'set null',
    }),
    version_title: text('version_title'),
    version_excerpt: text('version_excerpt'),
    version_seo_metaTitle: text('version_seo_meta_title'),
    version_seo_metaDescription: text('version_seo_meta_description'),
    version_generateSlug: integer('version_generate_slug', { mode: 'boolean' }).default(true),
    version_slug: text('version_slug'),
    version_status: text('version_status', { enum: ['draft', 'published'] }).default('draft'),
    version_publishedDate: text('version_published_date').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_author: integer('version_author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
    autosave: integer('autosave', { mode: 'boolean' }),
  },
  (columns) => [
    index('_blogs_v_parent_idx').on(columns.parent),
    index('_blogs_v_version_version_slug_idx').on(columns.version_slug),
    index('_blogs_v_version_version_author_idx').on(columns.version_author),
    index('_blogs_v_version_version_featured_image_idx').on(columns.version_featuredImage),
    index('_blogs_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    index('_blogs_v_version_version_created_at_idx').on(columns.version_createdAt),
    index('_blogs_v_version_version__status_idx').on(columns.version__status),
    index('_blogs_v_created_at_idx').on(columns.createdAt),
    index('_blogs_v_updated_at_idx').on(columns.updatedAt),
    index('_blogs_v_latest_idx').on(columns.latest),
    index('_blogs_v_autosave_idx').on(columns.autosave),
  ],
)

export const _blogs_v_rels = sqliteTable(
  '_blogs_v_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    categoriesID: integer('categories_id'),
    tagsID: integer('tags_id'),
  },
  (columns) => [
    index('_blogs_v_rels_order_idx').on(columns.order),
    index('_blogs_v_rels_parent_idx').on(columns.parent),
    index('_blogs_v_rels_path_idx').on(columns.path),
    index('_blogs_v_rels_categories_id_idx').on(columns.categoriesID),
    index('_blogs_v_rels_tags_id_idx').on(columns.tagsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_blogs_v.id],
      name: '_blogs_v_rels_parent_1_idx',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_blogs_v_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: '_blogs_v_rels_tags_fk',
    }).onDelete('cascade'),
  ],
)

export const categories = sqliteTable(
  'categories',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('categories_name_idx').on(columns.name),
    uniqueIndex('categories_slug_idx').on(columns.slug),
    index('categories_updated_at_idx').on(columns.updatedAt),
    index('categories_created_at_idx').on(columns.createdAt),
  ],
)

export const tags = sqliteTable(
  'tags',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('tags_name_idx').on(columns.name),
    uniqueIndex('tags_slug_idx').on(columns.slug),
    index('tags_updated_at_idx').on(columns.updatedAt),
    index('tags_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    userSessionsID: integer('user_sessions_id'),
    userAccountsID: integer('user_accounts_id'),
    verificationsID: integer('verifications_id'),
    'admin-invitationsID': integer('admin_invitations_id'),
    mediaID: integer('media_id'),
    addressID: integer('address_id'),
    educationsID: integer('educations_id'),
    experiencesID: integer('experiences_id'),
    blogsID: integer('blogs_id'),
    categoriesID: integer('categories_id'),
    tagsID: integer('tags_id'),
  },
  (columns) => [
    index('payload_locked_documents_rels_order_idx').on(columns.order),
    index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    index('payload_locked_documents_rels_path_idx').on(columns.path),
    index('payload_locked_documents_rels_users_id_idx').on(columns.usersID),
    index('payload_locked_documents_rels_user_sessions_id_idx').on(columns.userSessionsID),
    index('payload_locked_documents_rels_user_accounts_id_idx').on(columns.userAccountsID),
    index('payload_locked_documents_rels_verifications_id_idx').on(columns.verificationsID),
    index('payload_locked_documents_rels_admin_invitations_id_idx').on(
      columns['admin-invitationsID'],
    ),
    index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID),
    index('payload_locked_documents_rels_address_id_idx').on(columns.addressID),
    index('payload_locked_documents_rels_educations_id_idx').on(columns.educationsID),
    index('payload_locked_documents_rels_experiences_id_idx').on(columns.experiencesID),
    index('payload_locked_documents_rels_blogs_id_idx').on(columns.blogsID),
    index('payload_locked_documents_rels_categories_id_idx').on(columns.categoriesID),
    index('payload_locked_documents_rels_tags_id_idx').on(columns.tagsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_1_idx',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['userSessionsID']],
      foreignColumns: [user_sessions.id],
      name: 'payload_locked_documents_rels_user_sessions_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['userAccountsID']],
      foreignColumns: [user_accounts.id],
      name: 'payload_locked_documents_rels_user_accounts_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['verificationsID']],
      foreignColumns: [verifications.id],
      name: 'payload_locked_documents_rels_verifications_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['admin-invitationsID']],
      foreignColumns: [admin_invitations.id],
      name: 'payload_locked_documents_rels_admin_invitations_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['addressID']],
      foreignColumns: [address.id],
      name: 'payload_locked_documents_rels_address_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['educationsID']],
      foreignColumns: [educations.id],
      name: 'payload_locked_documents_rels_educations_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['experiencesID']],
      foreignColumns: [experiences.id],
      name: 'payload_locked_documents_rels_experiences_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['blogsID']],
      foreignColumns: [blogs.id],
      name: 'payload_locked_documents_rels_blogs_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'payload_locked_documents_rels_tags_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_preferences_key_idx').on(columns.key),
    index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    index('payload_preferences_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => [
    index('payload_preferences_rels_order_idx').on(columns.order),
    index('payload_preferences_rels_parent_idx').on(columns.parent),
    index('payload_preferences_rels_path_idx').on(columns.path),
    index('payload_preferences_rels_users_id_idx').on(columns.usersID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_1_idx',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch', { mode: 'number' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    index('payload_migrations_created_at_idx').on(columns.createdAt),
  ],
)

export const relations_users = relations(users, ({ one }) => ({
  profilePicture: one(media, {
    fields: [users.profilePicture],
    references: [media.id],
    relationName: 'profilePicture',
  }),
  address: one(address, {
    fields: [users.address],
    references: [address.id],
    relationName: 'address',
  }),
}))
export const relations_user_sessions = relations(user_sessions, ({ one }) => ({
  user: one(users, {
    fields: [user_sessions.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_user_accounts = relations(user_accounts, ({ one }) => ({
  user: one(users, {
    fields: [user_accounts.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_verifications = relations(verifications, () => ({}))
export const relations_admin_invitations = relations(admin_invitations, () => ({}))
export const relations_media = relations(media, ({ one }) => ({
  user: one(users, {
    fields: [media.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_address = relations(address, () => ({}))
export const relations_educations = relations(educations, ({ one }) => ({
  user: one(users, {
    fields: [educations.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_experiences = relations(experiences, ({ one }) => ({
  user: one(users, {
    fields: [experiences.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_blogs_blocks_rich_text = relations(blogs_blocks_rich_text, ({ one }) => ({
  _parentID: one(blogs, {
    fields: [blogs_blocks_rich_text._parentID],
    references: [blogs.id],
    relationName: '_blocks_richText',
  }),
}))
export const relations_blogs_blocks_image = relations(blogs_blocks_image, ({ one }) => ({
  _parentID: one(blogs, {
    fields: [blogs_blocks_image._parentID],
    references: [blogs.id],
    relationName: '_blocks_image',
  }),
  image: one(media, {
    fields: [blogs_blocks_image.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_blogs_blocks_code = relations(blogs_blocks_code, ({ one }) => ({
  _parentID: one(blogs, {
    fields: [blogs_blocks_code._parentID],
    references: [blogs.id],
    relationName: '_blocks_code',
  }),
}))
export const relations_blogs_rels = relations(blogs_rels, ({ one }) => ({
  parent: one(blogs, {
    fields: [blogs_rels.parent],
    references: [blogs.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [blogs_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  tagsID: one(tags, {
    fields: [blogs_rels.tagsID],
    references: [tags.id],
    relationName: 'tags',
  }),
}))
export const relations_blogs = relations(blogs, ({ one, many }) => ({
  _blocks_richText: many(blogs_blocks_rich_text, {
    relationName: '_blocks_richText',
  }),
  _blocks_image: many(blogs_blocks_image, {
    relationName: '_blocks_image',
  }),
  _blocks_code: many(blogs_blocks_code, {
    relationName: '_blocks_code',
  }),
  author: one(users, {
    fields: [blogs.author],
    references: [users.id],
    relationName: 'author',
  }),
  featuredImage: one(media, {
    fields: [blogs.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  _rels: many(blogs_rels, {
    relationName: '_rels',
  }),
}))
export const relations__blogs_v_blocks_rich_text = relations(
  _blogs_v_blocks_rich_text,
  ({ one }) => ({
    _parentID: one(_blogs_v, {
      fields: [_blogs_v_blocks_rich_text._parentID],
      references: [_blogs_v.id],
      relationName: '_blocks_richText',
    }),
  }),
)
export const relations__blogs_v_blocks_image = relations(_blogs_v_blocks_image, ({ one }) => ({
  _parentID: one(_blogs_v, {
    fields: [_blogs_v_blocks_image._parentID],
    references: [_blogs_v.id],
    relationName: '_blocks_image',
  }),
  image: one(media, {
    fields: [_blogs_v_blocks_image.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations__blogs_v_blocks_code = relations(_blogs_v_blocks_code, ({ one }) => ({
  _parentID: one(_blogs_v, {
    fields: [_blogs_v_blocks_code._parentID],
    references: [_blogs_v.id],
    relationName: '_blocks_code',
  }),
}))
export const relations__blogs_v_rels = relations(_blogs_v_rels, ({ one }) => ({
  parent: one(_blogs_v, {
    fields: [_blogs_v_rels.parent],
    references: [_blogs_v.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [_blogs_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  tagsID: one(tags, {
    fields: [_blogs_v_rels.tagsID],
    references: [tags.id],
    relationName: 'tags',
  }),
}))
export const relations__blogs_v = relations(_blogs_v, ({ one, many }) => ({
  parent: one(blogs, {
    fields: [_blogs_v.parent],
    references: [blogs.id],
    relationName: 'parent',
  }),
  _blocks_richText: many(_blogs_v_blocks_rich_text, {
    relationName: '_blocks_richText',
  }),
  _blocks_image: many(_blogs_v_blocks_image, {
    relationName: '_blocks_image',
  }),
  _blocks_code: many(_blogs_v_blocks_code, {
    relationName: '_blocks_code',
  }),
  version_author: one(users, {
    fields: [_blogs_v.version_author],
    references: [users.id],
    relationName: 'version_author',
  }),
  version_featuredImage: one(media, {
    fields: [_blogs_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  _rels: many(_blogs_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_categories = relations(categories, () => ({}))
export const relations_tags = relations(tags, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    userSessionsID: one(user_sessions, {
      fields: [payload_locked_documents_rels.userSessionsID],
      references: [user_sessions.id],
      relationName: 'userSessions',
    }),
    userAccountsID: one(user_accounts, {
      fields: [payload_locked_documents_rels.userAccountsID],
      references: [user_accounts.id],
      relationName: 'userAccounts',
    }),
    verificationsID: one(verifications, {
      fields: [payload_locked_documents_rels.verificationsID],
      references: [verifications.id],
      relationName: 'verifications',
    }),
    'admin-invitationsID': one(admin_invitations, {
      fields: [payload_locked_documents_rels['admin-invitationsID']],
      references: [admin_invitations.id],
      relationName: 'admin-invitations',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    addressID: one(address, {
      fields: [payload_locked_documents_rels.addressID],
      references: [address.id],
      relationName: 'address',
    }),
    educationsID: one(educations, {
      fields: [payload_locked_documents_rels.educationsID],
      references: [educations.id],
      relationName: 'educations',
    }),
    experiencesID: one(experiences, {
      fields: [payload_locked_documents_rels.experiencesID],
      references: [experiences.id],
      relationName: 'experiences',
    }),
    blogsID: one(blogs, {
      fields: [payload_locked_documents_rels.blogsID],
      references: [blogs.id],
      relationName: 'blogs',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: 'tags',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users: typeof users
  user_sessions: typeof user_sessions
  user_accounts: typeof user_accounts
  verifications: typeof verifications
  admin_invitations: typeof admin_invitations
  media: typeof media
  address: typeof address
  educations: typeof educations
  experiences: typeof experiences
  blogs_blocks_rich_text: typeof blogs_blocks_rich_text
  blogs_blocks_image: typeof blogs_blocks_image
  blogs_blocks_code: typeof blogs_blocks_code
  blogs: typeof blogs
  blogs_rels: typeof blogs_rels
  _blogs_v_blocks_rich_text: typeof _blogs_v_blocks_rich_text
  _blogs_v_blocks_image: typeof _blogs_v_blocks_image
  _blogs_v_blocks_code: typeof _blogs_v_blocks_code
  _blogs_v: typeof _blogs_v
  _blogs_v_rels: typeof _blogs_v_rels
  categories: typeof categories
  tags: typeof tags
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_user_sessions: typeof relations_user_sessions
  relations_user_accounts: typeof relations_user_accounts
  relations_verifications: typeof relations_verifications
  relations_admin_invitations: typeof relations_admin_invitations
  relations_media: typeof relations_media
  relations_address: typeof relations_address
  relations_educations: typeof relations_educations
  relations_experiences: typeof relations_experiences
  relations_blogs_blocks_rich_text: typeof relations_blogs_blocks_rich_text
  relations_blogs_blocks_image: typeof relations_blogs_blocks_image
  relations_blogs_blocks_code: typeof relations_blogs_blocks_code
  relations_blogs_rels: typeof relations_blogs_rels
  relations_blogs: typeof relations_blogs
  relations__blogs_v_blocks_rich_text: typeof relations__blogs_v_blocks_rich_text
  relations__blogs_v_blocks_image: typeof relations__blogs_v_blocks_image
  relations__blogs_v_blocks_code: typeof relations__blogs_v_blocks_code
  relations__blogs_v_rels: typeof relations__blogs_v_rels
  relations__blogs_v: typeof relations__blogs_v
  relations_categories: typeof relations_categories
  relations_tags: typeof relations_tags
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
